using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
using System.IO;
using System.Text.RegularExpressions;

namespace Scalar.Build
{
    public class GenerateScalarConstants : Task
    {
        [Required]
        public string MinimumGitVersion { get; set; }

        [Required]
        public string OutputFile { get; set; }

        public override bool Execute()
        {
            this.Log.LogMessage(MessageImportance.Normal, "Creating Scalar constants file with minimum Git version '{0}' at '{1}'...", this.MinimumGitVersion, this.OutputFile);

            if (!TryParseVersion(this.MinimumGitVersion, out var version))
            {
                this.Log.LogError("Failed to parse Git version '{0}'.", this.MinimumGitVersion);
                return false;
            }

            string outputDirectory = Path.GetDirectoryName(this.OutputFile);
            if (!Directory.Exists(outputDirectory))
            {
                Directory.CreateDirectory(outputDirectory);
            }

            string template =
@"//
// This file is auto-generated by Scalar.Build.GenerateScalarConstants.
// Any changes made directly in this file will be lost.
//
using Scalar.Common.Git;

namespace Scalar.Common
{{
    public static partial class ScalarConstants
    {{
        public static readonly GitVersion SupportedGitVersion = new GitVersion({0}, {1}, {2}, ""{3}"", {4}, {5});
    }}
}}";

            File.WriteAllText(
                this.OutputFile,
                string.Format(
                    template,
                    version.Major,
                    version.Minor,
                    version.Build,
                    version.Platform,
                    version.Revision,
                    version.MinorRevision));

            return true;
        }

        private static bool TryParseVersion(string versionString, out GitVersion version)
        {
            const string pattern = @"(\d+)\.(\d+)\.(\d+)\.([A-Z]+)\.(\d+)\.(\d+)";

            Match match = Regex.Match(versionString, pattern, RegexOptions.IgnoreCase);
            if (match.Success)
            {
                version = new GitVersion
                {
                    Major = int.Parse(match.Groups[1].Value),
                    Minor = int.Parse(match.Groups[2].Value),
                    Build = int.Parse(match.Groups[3].Value),
                    Platform = match.Groups[4].Value,
                    Revision = int.Parse(match.Groups[5].Value),
                    MinorRevision = int.Parse(match.Groups[6].Value)
                };

                return true;
            }

            version = default;
            return false;
        }

        private struct GitVersion
        {
            public int Major { get; set; }
            public int Minor { get; set; }
            public int Build { get; set; }
            public string Platform { get; set; }
            public int Revision { get; set; }
            public int MinorRevision { get; set; }
        }
    }
}
