parameters:
  useWatchman: true

steps:
  - bash: mkdir -p $(Build.ArtifactStagingDirectory)/logs
    displayName: Create logs directory

  - task: UseDotNet@2
    displayName: Use .NET Core SDK 3.0.100
    inputs:
      packageType: sdk
      version: 3.0.100

  - task: DownloadPipelineArtifact@2
    displayName: Download functional tests drop
    inputs:
      artifact: FunctionalTests_macOS_$(configuration)
      path: $(Build.BinariesDirectory)/ft

  - task: DownloadPipelineArtifact@2
    displayName: Download installers drop
    inputs:
      artifact: Installers_macOS_$(configuration)
      path: $(Build.BinariesDirectory)/install

  - bash: |
      chmod +x $(Build.BinariesDirectory)/ft/src/Scripts/Mac/*.sh
      chmod +x $(Build.BinariesDirectory)/install/*.sh
    displayName: Ensure all scripts are executable

  - ${{ if eq(parameters.useWatchman, 'true') }}:
    - bash: $(Build.BinariesDirectory)/install/InstallScalar.sh
      displayName: Install product (with watchman)

  - ${{ if ne(parameters.useWatchman, 'true') }}:
    - bash: $(Build.BinariesDirectory)/install/InstallScalar.sh --no-watchman
      displayName: Install product (without watchman)

  - ${{ if eq(parameters.useWatchman, 'true') }}:
    - bash: |
        watchman shutdown-server
        watchman watch-list --log-level=2
      displayName: Set watchman log level to debug

  - bash: $(Build.BinariesDirectory)/ft/src/Scripts/Mac/RunFunctionalTests.sh $(configuration) --test-scalar-on-path --trace2-output=$(Build.ArtifactStagingDirectory)/logs/trace2-event.log
    displayName: Run functional tests

  - ${{ if eq(parameters.useWatchman, 'true') }}:
    - task: PublishTestResults@2
      displayName: Publish functional tests results
      inputs:
        testRunner: NUnit
        testResultsFiles: "**\\TestResult*.xml"
        searchFolder: $(System.DefaultWorkingDirectory)
        testRunTitle: macOS $(configuration) Functional Tests (with watchman)
        publishRunAttachments: true
      condition: succeededOrFailed()

  - ${{ if ne(parameters.useWatchman, 'true') }}:
    - task: PublishTestResults@2
      displayName: Publish functional tests results
      inputs:
        testRunner: NUnit
        testResultsFiles: "**\\TestResult*.xml"
        searchFolder: $(System.DefaultWorkingDirectory)
        testRunTitle: macOS $(configuration) Functional Tests (without watchman)
        publishRunAttachments: true
      condition: succeededOrFailed()

  - ${{ if eq(parameters.useWatchman, 'true') }}:
    - bash: cp -pf '/usr/local/var/run/watchman/runner-state/log' '$(Build.ArtifactStagingDirectory)/logs/watchman-log'
      displayName: Copy watchman logs
      condition: failed()

  - ${{ if eq(parameters.useWatchman, 'true') }}:
    - task: PublishPipelineArtifact@1
      displayName: Publish test and installation logs
      inputs:
        targetPath: $(Build.ArtifactStagingDirectory)/logs
        artifactName: Logs_macOS_Watchman
      condition: failed()

  - ${{ if ne(parameters.useWatchman, 'true') }}:
    - task: PublishPipelineArtifact@1
      displayName: Publish test and installation logs
      inputs:
        targetPath: $(Build.ArtifactStagingDirectory)/logs
        artifactName: Logs_macOS
      condition: failed()

  - bash: $(Build.BinariesDirectory)/ft/src/Scripts/Mac/CleanupFunctionalTests.sh
    displayName: Cleanup
    condition: always()

  - bash: sudo rm -rf $(Build.BinariesDirectory)/ft
    displayName: Cleanup phase 2
    condition: always()
