parameters:
  useWatchman: true

variables:
  ${{ if eq(parameters.useWatchman, 'true') }}:
    watchmanFlag: '--watchman'
    watchmanStatusString: 'With Watchman'
    watchmanResultTitle: 'Watchman'

  ${{ if not(eq(parameters.useWatchman, 'true') }}:
    watchmanFlag: '--no-watchman'
    watchmanStatusString: 'No Watchman'
    watchmanResultTitle: 'NoWatchman'

steps:

  - task: NuGetToolInstaller@0
    inputs:
      versionSpec: '>=5.1'

  - task: UseDotNet@2
    displayName: Use .NET Core SDK 3.0.100
    inputs:
      packageType: sdk
      version: 3.0.100

  - task: DownloadBuildArtifacts@0
    displayName: Download functional tests drop
    inputs:
      buildType: current
      downloadType: specific
      artifactName: FunctionalTests_$(platformFriendlyName)_$(configuration)
      downloadPath: $(Build.BinariesDirectory)

  - task: DownloadBuildArtifacts@0
    displayName: Download installers drop
    inputs:
      buildType: current
      downloadType: specific
      artifactName: Installers_$(platformFriendlyName)_$(configuration)
      downloadPath: $(Build.BinariesDirectory)

  - script: $(Build.BinariesDirectory)/Installers_$(platformFriendlyName)_$(configuration)/InstallScalar.bat $(watchmanFlag) $(Build.ArtifactStagingDirectory)\logs
    displayName: Install product ($(watchmanStatusString))

  - script: git config --global credential.interactive never
    displayName: Disable interactive auth

  - script: $(Build.BinariesDirectory)/FunctionalTests_$(platformFriendlyName)_$(configuration)/src/Scripts/RunFunctionalTests.bat $(configuration) --test-scalar-on-path "--trace2-output=$(Build.ArtifactStagingDirectory)\logs\trace2-event.log"
    displayName: Run functional tests

  - task: PublishTestResults@2
    displayName: Publish functional tests results
    inputs:
      testRunner: NUnit
      testResultsFiles: "**\\TestResult*.xml"
      searchFolder: $(System.DefaultWorkingDirectory)
      testRunTitle: Windows $(configuration) Functional Tests ($(watchmanStatusString))
      publishRunAttachments: true
    condition: succeededOrFailed()

  - task: PublishBuildArtifacts@1
    displayName: Publish test and installation logs
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)\logs'
      artifactName: Logs_$(platformFriendlyName)_$(watchmanResultTitle)
    condition: failed()
