parameters:
  useWatchman: true

variables:
  ${{ if eq(parameters.useWatchman, 'true') }}:
    watchmanFlag: ''
    watchmanStatusString: 'With Watchman'
    watchmanResultTitle: 'Watchman'

  ${{ if not(eq(parameters.useWatchman, 'true') }}:
    watchmanFlag: '--no-watchman'
    watchmanStatusString: 'No Watchman'
    watchmanResultTitle: 'NoWatchman'

steps:

  - task: UseDotNet@2
    displayName: Use .NET Core SDK 3.0.100
    inputs:
      packageType: sdk
      version: 3.0.100

  - task: DownloadBuildArtifacts@0
    displayName: Download functional tests drop
    inputs:
      buildType: current
      downloadType: specific
      artifactName: FunctionalTests_$(platformFriendlyName)_$(configuration)
      downloadPath: $(Build.BinariesDirectory)

  - task: DownloadBuildArtifacts@0
    displayName: Download installers drop
    inputs:
      buildType: current
      downloadType: specific
      artifactName: Installers_$(platformFriendlyName)_$(configuration)
      downloadPath: $(Build.BinariesDirectory)

  - bash: |
      chmod +x $(Build.BinariesDirectory)/FunctionalTests_$(platformFriendlyName)_$(configuration)/src/Scripts/Mac/*.sh
      chmod +x $(Build.BinariesDirectory)/Installers_$(platformFriendlyName)_$(configuration)/*.sh
    displayName: Ensure all scripts are executable

  - bash: mkdir -p $(Build.ArtifactStagingDirectory)/logs
    displayName: Create logs directory

  - bash: $(Build.BinariesDirectory)/Installers_$(platformFriendlyName)_$(configuration)/InstallScalar.sh $(watchmanFlag)
    displayName: Install product ($(watchmanStatusString))

  - ${{ if eq(parameters.useWatchman, 'true') }}:
    - bash: watchman log-level debug
      displayName: Set watchman log level to debug

  - bash: $(Build.BinariesDirectory)/FunctionalTests_$(platformFriendlyName)_$(configuration)/src/Scripts/Mac/RunFunctionalTests.sh $(configuration) --test-scalar-on-path --trace2-output=$(Build.ArtifactStagingDirectory)/logs/trace2-event.log
    displayName: Run functional tests

  - task: PublishTestResults@2
    displayName: Publish functional tests results
    inputs:
      testRunner: NUnit
      testResultsFiles: "**\\TestResult*.xml"
      searchFolder: $(System.DefaultWorkingDirectory)
      testRunTitle: macOS $(configuration) Functional Tests ($(watchmanStatusString))
      publishRunAttachments: true
    condition: succeededOrFailed()

  - ${{ if eq(parameters.useWatchman, 'true') }}:
    - bash: cp -pf '/usr/local/var/run/watchman/runner-state/log' '$(Build.ArtifactStagingDirectory)/logs/watchman-log'
      displayName: Copy Watchman logs
      condition: failed()

  - task: PublishBuildArtifacts@1
    displayName: Publish test and installation logs
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/logs'
      artifactName: Logs_$(platformFriendlyName)_$(watchmanResultTitle)
    condition: failed()

  - bash: $(Build.BinariesDirectory)/FunctionalTests_$(platformFriendlyName)_$(configuration)/src/Scripts/Mac/CleanupFunctionalTests.sh
    displayName: Cleanup
    condition: always()

  - bash: sudo rm -rf $(Build.BinariesDirectory)/FunctionalTests_$(platformFriendlyName)_$(configuration)
    displayName: Cleanup phase 2
    condition: always()

